{"/home/travis/build/npmtest/node-npmtest-closurecompiler/test.js":"/* istanbul instrument in package npmtest_closurecompiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/lib.npmtest_closurecompiler.js":"/* istanbul instrument in package npmtest_closurecompiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_closurecompiler = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_closurecompiler = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-closurecompiler && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_closurecompiler */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_closurecompiler\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_closurecompiler.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_closurecompiler.rollup.js'] =\n            local.assetsDict['/assets.npmtest_closurecompiler.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_closurecompiler.__dirname + '/lib.npmtest_closurecompiler.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/ClosureCompiler.js":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license ClosureCompiler.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/ClosureCompiler.js for details\r\n */\r\n(function(global) {\r\n\r\n    if (typeof require != 'function' || !module || !module.exports || !process) {\r\n        throw(new Error(\"ClosureCompiler.js can only be used within node.js\"));\r\n    }\r\n\r\n    // Dependencies\r\n    var path = require(\"path\"),\r\n        fs = require(\"fs\"),\r\n        child_process = require(\"child_process\"),\r\n        concat = require('bl');\r\n\r\n    if (!fs.existsSync) fs.existsSync = path.existsSync; // node < 0.8\r\n\r\n    /**\r\n     * Constructs a new ClosureCompiler instance.\r\n     * @exports ClosureCompiler\r\n     * @class Closure Compiler binding.\r\n     * @param {Object.<string,*>=} options Compilation options\r\n     * @constructor\r\n     */\r\n    var ClosureCompiler = function(options) {\r\n\r\n        /**\r\n         * Compilation options.\r\n         * @type {Object.<string, *>}\r\n         */\r\n        this.options = typeof options === 'object' && options ? options : {};\r\n    };\r\n\r\n    /**\r\n     * Validates an option.\r\n     * @param {string} name Option name\r\n     * @param {string} actual Actual value\r\n     * @param {Array} expected Expected values\r\n     * @throw {Error} If the option is invalid\r\n     * @private\r\n     */\r\n    ClosureCompiler._assertOption = function(name, actual, expected) {\r\n        if (expected.indexOf(actual) < 0) {\r\n            throw(\"Illegal \"+name+\" value: \"+actual+\" (\"+expected+\" expected)\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Java extension, e.g. '.exe' on windows.\r\n     * @type {string}\r\n     */\r\n    ClosureCompiler.JAVA_EXT = process.platform == 'win32' ? '.exe' : '';\r\n\r\n    /**\r\n     * Gets the path of the global java executable.\r\n     * @return {string} Absolute path to or \"java(.exe)\" if not determinable\r\n     */\r\n    ClosureCompiler.getGlobalJava = function() {\r\n        var java = null;\r\n\r\n        if (process.env[\"JAVA_HOME\"]) {\r\n            java = path.join(process.env[\"JAVA_HOME\"], \"bin\", \"java\"+ClosureCompiler.JAVA_EXT);\r\n            if (!fs.existsSync(java)) {\r\n                java = null;\r\n            }\r\n        }\r\n        if (!java) {\r\n            java = \"java\";\r\n        }\r\n        return java;\r\n    };\r\n\r\n    /**\r\n     * Gets the path of the bundled java executable.\r\n     * @return {string} Absolute path to \"java(.exe)\"\r\n     */\r\n    ClosureCompiler.getBundledJava = function() {\r\n        return path.normalize(path.join(__dirname, \"jre\", \"bin\", \"java\"+ClosureCompiler.JAVA_EXT));\r\n    };\r\n\r\n    /**\r\n     * Tests if java is callable.\r\n     * @param {string} java Path to java\r\n     * @param {function(boolean, Error)} callback Callback function\r\n     */\r\n    ClosureCompiler.testJava = function(java, callback) {\r\n        child_process.exec('\"'+java+'\" -version', {}, function(error, stdout, stderr) {\r\n            stderr += \"\";\r\n            if (stderr.match(/1\\.[7-8]+/)) {\r\n                callback(true, null);\r\n            } else if (stderr.indexOf(\"version \\\"\") >= 0) {\r\n                callback(false, new Error(\"Not Java 7\"));\r\n            } else {\r\n                callback(false, error);\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Compiles one or more scripts through a new instance of ClosureCompiler.\r\n     * @param {string|Array.<string>} files File or an array of files to compile\r\n     * @param {Object.<string,*|Array>} options Any options Closure Compiler supports. If an option can occur\r\n     *  multiple times, simply supply an array. Externs can additionally point to a directory to include all *.js files\r\n     *  in it.\r\n     * @param {ReadStream} stdin Optional read stream to use as stdin for closure compiler\r\n     * @param {function(Error,string)} callback Callback called with the error, if any, and the compiled code\r\n     * @throws {Error} If the file cannot be compiled\r\n     */\r\n    ClosureCompiler.compile = function(files, options, stdin, callback) {\r\n        if (arguments.length < 4) {\r\n            callback = stdin;\r\n            stdin = null;\r\n        }\r\n        new ClosureCompiler(options).compile(files, stdin, callback);\r\n    };\r\n\r\n    /**\r\n     * Compiles one or more scripts through this instance of ClosureCompiler.\r\n     * @param {string|Array.<string>} files File or an array of files to compile\r\n     * @param {ReadStream} stdin Optional read stream to use as stdin for closure compiler\r\n     * @param {function((Error|string),string)} callback Callback called with the error, if any, and the compiled code.\r\n     *  If no error occurred, error contains the string output from stderr besides the result.\r\n     * @throws {Error} If the file cannot be compiled\r\n     */\r\n    ClosureCompiler.prototype.compile = function(files, stdin, callback) {\r\n        if (arguments.length < 3) {\r\n            callback = stdin;\r\n            stdin = null;\r\n        }\r\n\r\n        // Convert all option keys to lower case\r\n        var options = {};\r\n        var keys = Object.keys(this.options);\r\n        for (var i=0; i<keys.length; i++) {\r\n            options[keys[i].toLowerCase()] = this.options[keys[i]];\r\n        }\r\n        delete options[\"js\"];\r\n        delete options[\"js_output_file\"];\r\n\r\n        var xms = options[\"xms\"] || null,\r\n            xmx = options[\"xmx\"] || \"1024m\";\r\n        delete options[\"xms\"];\r\n        delete options[\"xmx\"];\r\n\r\n        var jarFilePath;\r\n        if (options['compiler_jar']) {\r\n            jarFilePath = options['compiler_jar'];\r\n            delete options['compiler_jar'];\r\n        } else {\r\n            var jarDir = __dirname + '/compiler';\r\n            fs.readdirSync(jarDir).forEach(function(file) {\r\n                if (file.indexOf('closure-compiler') !== -1) {\r\n                    jarFilePath = jarDir + \"/\" + file;\r\n                }\r\n            });\r\n        }\r\n\r\n        // -XX:+TieredCompilation speeds up compilation for Java 1.7.\r\n        // Previous -d32 was for Java 1.6 only.\r\n        // Compiler now requires Java 1.7 and this flag does not need detection.\r\n        var args = ['-XX:+TieredCompilation'];\r\n            if (xms) args.push('-Xms'+xms);\r\n            args.push(\r\n                '-Xmx'+xmx,\r\n                '-jar', jarFilePath\r\n            );\r\n\r\n        // Source files\r\n        if (!(files instanceof Array)) {\r\n            files = [files];\r\n        }\r\n        for (i=0; i<files.length; i++) {\r\n            if (typeof files[i] != 'string') {\r\n                throw(new Error(\"Illegal source file: \"+files[i]));\r\n            }\r\n            if (files[i].indexOf('\"') >= 0) {\r\n                args.push('--js=' + files[i]);\r\n            } else {\r\n                stat = fs.statSync(files[i]);\r\n                if (!stat.isFile()) {\r\n                    throw (new Error(\"Source file not found: \" + files[i]));\r\n                }\r\n                args.push('--js', files[i]);\r\n            }\r\n        }\r\n\r\n        // Externs files\r\n        if (!options.externs) options.externs = [];\r\n        if (!(options.externs instanceof Array)) {\r\n            options.externs = [options.externs];\r\n        }\r\n        var externs = [];\r\n        var j, stat;\r\n        for (i=0; i<options.externs.length; i++) {\r\n            if (typeof options.externs[i] != 'string' || options.externs[i] == \"\") {\r\n                throw(new Error(\"Externs directive does not point to a file or directory: \"+options.externs[i]));\r\n            }\r\n            if (options.externs[i].toLowerCase() == \"node\") {\r\n                options.externs[i] = __dirname+\"/node_modules/closurecompiler-externs\";\r\n            }\r\n            stat = fs.statSync(options.externs[i]);\r\n            if (stat.isDirectory()) {\r\n                // Use all files in that directory\r\n                var dfiles = fs.readdirSync(options.externs[i]);\r\n                for (j=0; j<dfiles.length; j++) {\r\n                    var fname = options.externs[i]+\"/\"+dfiles[j];\r\n                    var fstats = fs.statSync(fname);\r\n                    if (fstats.isFile() && path.extname(fname).toLowerCase() == '.js') {\r\n                        externs.push(fname);\r\n                    }\r\n                }\r\n            } else if (stat.isFile()) {\r\n                externs.push(options.externs[i]);\r\n            } else {\r\n                throw(new Error(\"Externs file not found: \"+options.externs[i]));\r\n            }\r\n        }\r\n        delete options[\"externs\"];\r\n        for (i=0; i<externs.length; i++) {\r\n            args.push('--externs', externs[i]);\r\n        }\r\n\r\n        // Convert any other options to command line arguments\r\n        keys = Object.keys(options);\r\n        for (i=0; i<keys.length; i++) {\r\n            var key = keys[i];\r\n            var value = options[keys[i]];\r\n            if (!/[a-zA-Z0-9_]+/.test(key)) {\r\n                throw(new Error(\"Illegal option: \"+key));\r\n            }\r\n            if (value === true) { // Only once\r\n                args.push('--'+key);\r\n            } else if (value === false) {\r\n                // Skip\r\n            } else { // Multiple times\r\n                if (!(value instanceof Array)) {\r\n                    value = [value];\r\n                }\r\n                for (j=0; j<value.length; j++) {\r\n                    if (!/[^\\s]*/.test(value[j])) {\r\n                        throw(new Error(\"Illegal value for option \"+key+\": \"+value[j]));\r\n                    }\r\n                    args.push('--'+key, value[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Executes a command\r\n        function exec(cmd, args, stdin, callback) {\r\n            var stdout = concat();\r\n            var stderr = concat();\r\n\r\n            var process = child_process.spawn(cmd, args, {\r\n                stdio: [stdin || 'ignore', 'pipe', 'pipe']\r\n            });\r\n            process.stdout.pipe(stdout);\r\n            process.stderr.pipe(stderr);\r\n            process.on('exit', function(code, signal) {\r\n              var err;\r\n              if (code) {\r\n                err = new Error(code);\r\n                err.code = code;\r\n                err.signal = signal;\r\n              }\r\n              callback(err, stdout, stderr);\r\n            });\r\n            process.on('error', function (err) {\r\n              callback(err, stdout, stderr);\r\n            });\r\n        }\r\n\r\n        // Run it\r\n        function run(java, args) {\r\n            exec(java, args, stdin, function(error, stdout, stderr) {\r\n                if (stdout.length > 0 || stderr.length > 0) { // If we get output, error basically just contains a copy of stderr\r\n                    callback(stderr+\"\", stdout+\"\");\r\n                } else {\r\n                    callback(error, null);\r\n                }\r\n            });\r\n        }\r\n\r\n        // Try any other global java\r\n        ClosureCompiler.testJava(ClosureCompiler.getGlobalJava(), function(ok) {\r\n            if (ok) {\r\n                run(ClosureCompiler.getGlobalJava(), args);\r\n            } else {\r\n                // If there is no global java, try the bundled one\r\n                ClosureCompiler.testJava(ClosureCompiler.getBundledJava(), function(ok) {\r\n                    if (ok) {\r\n                        run(ClosureCompiler.getBundledJava(), args);\r\n                    } else {\r\n                        throw(new Error(\"Java is not available, neither the bundled nor a global one.\"));\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Returns a string representation of this object.\r\n     * @returns {string} String representation as of \"ClosureCompiler\"\r\n     */\r\n    ClosureCompiler.prototype.toString = function() {\r\n        return \"ClosureCompiler\";\r\n    };\r\n\r\n    module[\"exports\"] = ClosureCompiler;\r\n\r\n})(this);\r\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/externs/child_process.js":"/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Definitions for node's child_process module. Depends on the events module.\n * @see http://nodejs.org/api/child_process.html\n * @see https://github.com/joyent/node/blob/master/lib/child_process.js\n * @externs\n * @author Daniel Wirtz <dcode@dcode.io>\n */\n\n/**\n BEGIN_NODE_INCLUDE\n var child_process = require('child_process');\n END_NODE_INCLUDE\n */\n\n/**\n * @type {Object.<string,*>}\n */\nvar child_process = {};\n\n/**\n * @constructor\n * @param {...*} var_args\n * @extends events.EventEmitter\n */\nchild_process.ChildProcess = function(var_args) {}; // Private?\n\n/**\n * @type {stream.ReadableStream}\n */\nchild_process.ChildProcess.prototype.stdin;\n\n/**\n * @type {stream.WritableStream}\n */\nchild_process.ChildProcess.prototype.stdout;\n\n/**\n * @type {stream.WritableStream}\n */\nchild_process.ChildProcess.prototype.stderr;\n\n/**\n * @type {number}\n */\nchild_process.ChildProcess.prototype.pid;\n\n/**\n * @param {string=} signal\n */\nchild_process.ChildProcess.prototype.kill = function(signal) {};\n\n/**\n * @param {Object.<string,*>} message\n * @param {*} sendHandle\n */\nchild_process.ChildProcess.prototype.send = function(message, sendHandle) {};\n\n/**\n */\nchild_process.ChildProcess.prototype.disconnect = function() {};\n\n/**\n * @typedef {{cwd: string, stdio: Array|string, customFds: Array, env: Object.<string,*>, detached: boolean, uid: number, gid: number, encoding: string, timeout: number, maxBuffer: number, killSignal: string}}\n */\nchild_process.Options;\n\n/**\n * @param {string} command\n * @param {Array.<string>=} args\n * @param {child_process.Options=} options\n * @return {child_process.ChildProcess}\n */\nchild_process.ChildProcess.spawn = function(command, args, options) {};\n\n/**\n * @param {string} command\n * @param {child_process.Options=|function(Error, Buffer, Buffer)=} options\n * @param {function(Error, Buffer, Buffer)=} callback\n * @return {child_process.ChildProcess}\n */\nchild_process.exec = function(command, options, callback) {};\n\n/**\n * @param {string} file\n * @param {Array.<string>} args\n * @param {child_process.Options} options\n * @param {function(Error, Buffer, Buffer)} callback\n * @return {child_process.ChildProcess}\n */\nchild_process.execFile = function(file, args, options, callback) {};\n\n/**\n * @param {string} modulePath\n * @param {Array.<string>=} args\n * @param {child_process.Options} options\n * @return {child_process.ChildProcess}\n */\nchild_process.fork = function(modulePath, args, options) {};\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/externs/fs.js":"/*\r\n * Copyright 2012 The Closure Compiler Authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Definitions for node's fs module. Depends on the stream and events module.\r\n * @see http://nodejs.org/api/fs.html\r\n * @see https://github.com/joyent/node/blob/master/lib/fs.js\r\n * @externs\r\n * @author Daniel Wirtz <dcode@dcode.io>\r\n */\r\n\r\n/**\r\n BEGIN_NODE_INCLUDE\r\n var fs = require('fs');\r\n END_NODE_INCLUDE\r\n */\r\n\r\nvar fs = {};\r\n\r\n/**\r\n * @param {string} oldPath\r\n * @param {string} newPath\r\n * @param {function(...)=} callback\r\n */\r\nfs.rename = function(oldPath, newPath, callback) {};\r\n\r\n/**\r\n * @param {string} oldPath\r\n * @param {string} newPath\r\n */\r\nfs.renameSync = function(oldPath, newPath) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} len\r\n * @param {function(...)=} callback\r\n */\r\nfs.truncate = function(fd, len, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} len\r\n */\r\nfs.truncateSync = function(fd, len) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.chown = function(path, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.chownSync = function(path, uid, gid) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.fchown = function(fd, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.fchownSync = function(fd, uid, gid) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n * @param {function(...)=} callback\r\n */\r\nfs.lchown = function(path, uid, gid, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} uid\r\n * @param {number} gid\r\n */\r\nfs.lchownSync = function(path, uid, gid) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.chmod = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n */\r\nfs.chmodSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.fchmod = function(fd, mode, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} mode\r\n */\r\nfs.fchmodSync = function(fd, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.lchmod = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} mode\r\n */\r\nfs.lchmodSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.stat = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.statSync = function(path) {}\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.fstat = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.fstatSync = function(fd) {}\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, fs.Stats)=} callback\r\n * @nosideeffects\r\n */\r\nfs.lstat = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @nosideeffects\r\n */\r\nfs.lstatSync = function(path) {}\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {function(...)=} callback\r\n */\r\nfs.link = function(srcpath, dstpath, callback) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n */\r\nfs.linkSync = function(srcpath, dstpath) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {string=} type\r\n * @param {function(...)=} callback\r\n */\r\nfs.symlink = function(srcpath, dstpath, type, callback) {};\r\n\r\n/**\r\n * @param {string} srcpath\r\n * @param {string} dstpath\r\n * @param {string=} type\r\n */\r\nfs.symlinkSync = function(srcpath, dstpath, type) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string, string)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readlink = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {string}\r\n * @nosideeffects\r\n */\r\nfs.readlinkSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {object.<string,string>=|function(string, string)=} cache\r\n * @param {function(string, string)=} callback\r\n * @nosideeffects\r\n */\r\nfs.realpath = function(path, cache, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {object.<string,string>=} cache\r\n * @return {string}\r\n * @nosideeffects\r\n */\r\nfs.realpathSync = function(path, cache) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(...)=} callback\r\n */\r\nfs.unlink = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n */\r\nfs.unlinkSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(...)=} callback\r\n */\r\nfs.rmdir = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n */\r\nfs.rmdirSync = function(path) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number=} mode\r\n * @param {function(...)=} callback\r\n */\r\nfs.mkdir = function(path, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number=} mode\r\n */\r\nfs.mkdirSync = function(path, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(string,array.<string>)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readdir = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @return {array.<string>}\r\n * @nosideeffects\r\n */\r\nfs.readdirSync = function(path) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(...)=} callback\r\n */\r\nfs.close = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n */\r\nfs.closeSync = function(fd) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {string} flags\r\n * @param {number=} mode\r\n * @param {function(string, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.open = function(path, flags, mode, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {string} flags\r\n * @param {number=} mode\r\n * @return {*}\r\n * @nosideeffects\r\n */\r\nfs.openSync = function(path, flags, mode) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @param {function(...)=} callback\r\n * @nosideeffects\r\n */\r\nfs.utimes = function(path, atime, mtime, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @nosideeffects\r\n */\r\nfs.utimesSync = function(path, atime, mtime) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @param {function(...)=} callback\r\n * @nosideeffects\r\n */\r\nfs.futimes = function(fd, atime, mtime, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {number} atime\r\n * @param {number} mtime\r\n * @nosideeffects\r\n */\r\nfs.futimesSync = function(fd, atime, mtime) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {function(...)=} callback\r\n */\r\nfs.fsync = function(fd, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n */\r\nfs.fsyncSync = function(fd) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @param {function(string, number, *)=} callback\r\n */\r\nfs.write = function(fd, buffer, offset, length, position, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @return {number}\r\n */\r\nfs.writeSync = function(fd, buffer, offset, length, position) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @param {function(string, number, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.read = function(fd, buffer, offset, length, position, callback) {};\r\n\r\n/**\r\n * @param {*} fd\r\n * @param {*} buffer\r\n * @param {number} offset\r\n * @param {number} length\r\n * @param {number} position\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nfs.readSync = function(fd, buffer, offset, length, position) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {string=|function(string, *)=}encoding\r\n * @param {function(string, *)=} callback\r\n * @nosideeffects\r\n */\r\nfs.readFile = function(filename, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {string=} encoding\r\n * @nosideeffects\r\n */\r\nfs.readFileSync = function(filename, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n * @param {function(string)=} callback\r\n */\r\nfs.writeFile = function(filename, data, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=} encoding\r\n */\r\nfs.writeFileSync = function(filename, data, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n * @param {function(string)=} callback\r\n */\r\nfs.appendFile = function(filename, data, encoding, callback) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {*} data\r\n * @param {string=|function(string)=} encoding\r\n */\r\nfs.appendFileSync = function(filename, data, encoding) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {{persistent: boolean, interval: number}=|function(*,*)} options\r\n * @param {function(*,*)=} listener\r\n */\r\nfs.watchFile = function(filename, options, listener) {};\r\n\r\n/**\r\n * @param {string} filename\r\n * @param {function=} listener\r\n */\r\nfs.unwatchFile = function(filename, listener) {};\r\n\r\n/**\r\n * \r\n * @param {string} filename\r\n * @param {{persistent: boolean}=|function(string, string)} options\r\n * @param {function(string, string)=} listener\r\n * @return {fs.FSWatcher}\r\n */\r\nfs.watch = function(filename, options, listener) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {function(boolean)} callback\r\n * @nosideeffects\r\n */\r\nfs.exists = function(path, callback) {};\r\n\r\n/**\r\n * @param {string} path\r\n * @nosideeffects\r\n */\r\nfs.existsSync = function(path) {};\r\n\r\n/**\r\n * @constructor\r\n */\r\nfs.Stats = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isFile = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isDirectory = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isBlockDevice = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isCharacterDevice = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isSymbolicLink = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isFIFO = function() {};\r\n\r\n/**\r\n * @return {boolean}\r\n * @nosideeffects\r\n */\r\nfs.Stats.prototype.isSocket = function() {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.dev = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.ino = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.mode = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.nlink = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.uid = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.gid = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.rdev = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.size = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.blkSize = 0;\r\n\r\n/**\r\n * @type {number}\r\n */\r\nfs.Stats.prototype.blocks = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.atime = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.mtime = 0;\r\n\r\n/**\r\n * @type {Date}\r\n */\r\nfs.Stats.prototype.ctime = 0;\r\n\r\n/**\r\n * @param {string} path\r\n * @param {{flags: string, encoding: ?string, fd: *, mode: number, bufferSize: number}=} options\r\n * @return {fs.ReadStream}\r\n * @nosideeffects\r\n */\r\nfs.createReadStream = function(path, options) {};\r\n\r\n/**\r\n * @constructor\r\n * @extends stream.ReadableStream\r\n */\r\nfs.ReadStream = function() {};\r\n\r\n/**\r\n * @param {string} path\r\n * @param {{flags: string, encoding: ?string, mode: number}=} options\r\n * @return {fs.WriteStream}\r\n * @nosideeffects\r\n */\r\nfs.createWriteStream = function(path, options) {};\r\n\r\n/**\r\n * @constructor\r\n * @extends stream.WritableStream\r\n */\r\nfs.WriteStream = function() {};\r\n\r\n/**\r\n * @constructor\r\n * @extends events.EventEmitter\r\n */\r\nfs.FSWatcher = function() {};\r\n\r\n/**\r\n */\r\nfs.FSWatcher.prototype.close = function() {};\r\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/externs/path.js":"/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverfiew Definitions for node's path module.\n * @see http://nodejs.org/api/path.html\n * @externs\n * @author Daniel Wirtz <dcode@dcode.io>\n */\n\n/**\n BEGIN_NODE_INCLUDE\n var path = require('path');\n END_NODE_INCLUDE\n */\n\n/**\n * @type {Object.<string,*>}\n */\nvar path = {};\n\n/**\n * @param {string} p\n * @return {string}\n * @nosideeffects\n */\npath.normalize = function(p) {};\n\n/**\n * @param {...string} var_args\n * @return {string}\n * @nosideeffects\n */\npath.join = function(var_args) {};\n\n/**\n * @param {string} from\n * @param {string=} to\n * @return {string}\n * @nosideeffects\n */\npath.resolve = function(from, to) {};\n\n/**\n * @param {string} from\n * @param {string} to\n * @return {string}\n * @nosideeffects\n */\npath.relative = function(from, to) {};\n\n/**\n * @param {string} p\n * @return {string}\n * @nosideeffects\n */\npath.dirname = function(p) {};\n\n/**\n * @param {string} p\n * @param {string=} ext\n * @return {string}\n * @nosideeffects\n */\npath.basename = function(p, ext) {};\n\n/**\n * @param {string} p\n * @return {string}\n * @nosideeffects\n */\npath.extname = function(p) {};\n\n/**\n * @type {string}\n */\npath.sep;\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/externs/process.js":"/*\r\n * Copyright 2012 The Closure Compiler Authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Definitions for node's global process object. Depends on the stream module.\r\n * @see http://nodejs.org/api/process.html\r\n * @externs\r\n * @author Daniel Wirtz <dcode@dcode.io>\r\n */\r\n\r\n/**\r\n * @constructor\r\n * @extends events.EventEmitter\r\n */\r\nvar process = function() {};\r\n\r\n/**\r\n * @type {stream.ReadableStream}\r\n */\r\nprocess.stdin;\r\n\r\n/**\r\n * @type {stream.WritableStream}\r\n */\r\nprocess.stdout;\r\n\r\n/**\r\n * @type {stream.WritableStream}\r\n */\r\nprocess.stderr;\r\n\r\n/**\r\n * @type {array,<string>}\r\n */\r\nprocess.argv;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nprocess.execPath;\r\n\r\n/**\r\n */\r\nprocess.abort = function() {};\r\n\r\n/**\r\n * @param {string} directory\r\n */\r\nprocess.chdir = function(directory) {};\r\n\r\n/**\r\n * @return {string}\r\n * @nosideeffects\r\n */\r\nprocess.cwd = function() {};\r\n\r\n/**\r\n * @type {object.<string,string>}\r\n */\r\nprocess.env;\r\n\r\n/**\r\n * @param {number=} code\r\n */\r\nprocess.exit = function(code) {};\r\n\r\n/**\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nprocess.getgid = function() {};\r\n\r\n/**\r\n * @param {number} id\r\n */\r\nprocess.setgid = function(id) {};\r\n\r\n/**\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nprocess.getuid = function() {};\r\n\r\n/**\r\n * @param {number} id\r\n */\r\nprocess.setuid = function(id) {};\r\n\r\n/**\r\n * @type {!string}\r\n */\r\nprocess.version;\r\n\r\n/**\r\n * @type {Object.<string,string>}\r\n */\r\nprocess.versions;\r\n\r\n/**\r\n * @type {object.<string,*>}\r\n */\r\nprocess.config;\r\n\r\n/**\r\n * @param {number} pid\r\n * @param {string=} signal\r\n */\r\nprocess.kill = function(pid, signal) {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nprocess.pid;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nprocess.title;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nprocess.arch;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nprocess.platform;\r\n\r\n/**\r\n * @return {object.<string,number}\r\n * @nosideeffects\r\n */\r\nprocess.memoryUsage = function() {};\r\n\r\n/**\r\n * @param {!function} callback\r\n */\r\nprocess.nextTick = function(callback) {};\r\n\r\n/**\r\n * @param {number=} mask\r\n */\r\nprocess.umask = function(mask) {};\r\n\r\n/**\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nprocess.uptime = function() {};\r\n\r\n/**\r\n * @return {number}\r\n * @nosideeffects\r\n */\r\nprocess.hrtime = function() {};\r\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/lib/follow-redirects.js":"// substitute underscore (dcode)\r\nvar _ = {}; _.extend = function(obj) {\r\n    Array.prototype.slice.call(arguments, 1).forEach(function(source) {\r\n        if (source)\r\n            for (var prop in source) {\r\n                obj[prop] = source[prop];\r\n            }\r\n    });\r\n    return obj;\r\n};\r\n\r\n/*\r\n follow-redirects Copyright © 2014 Olivier Lalonde <olalonde@gmail.com>\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated \r\n ocumentation files (the “Software”), to deal in the Software without restriction, including without limitation the\r\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\r\n persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\n The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\r\n WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n// ref: https://github.com/olalonde/follow-redirects\r\nvar nativeHttps = require('https'),\r\n    nativeHttp = require('http'),\r\n    url = require('url');\r\n\r\nvar maxRedirects = module.exports.maxRedirects = 5;\r\n\r\nvar protocols = {\r\n    https: nativeHttps,\r\n    http: nativeHttp\r\n};\r\n\r\n// Only use GETs on redirects\r\nfor (var protocol in protocols) {\r\n    // h is either our cloned http or https object\r\n    var h =  function() {};\r\n    h.prototype = protocols[protocol];\r\n    h = new h();\r\n\r\n    module.exports[protocol] = h;\r\n\r\n    h.request = function (h) {\r\n        return function (options, callback, redirectOptions) {\r\n\r\n            redirectOptions = redirectOptions || {};\r\n\r\n            var max = (typeof options === 'object' && 'maxRedirects' in options) ? options.maxRedirects : exports.maxRedirects;\r\n\r\n            var redirect = _.extend({\r\n                count: 0,\r\n                max: max,\r\n                clientRequest: null,\r\n                userCallback: callback\r\n            }, redirectOptions);\r\n\r\n            /**\r\n             * Emit error if too many redirects\r\n             */\r\n            if (redirect.count > redirect.max) {\r\n                var err = new Error('Max redirects exceeded. To allow more redirects, pass options.maxRedirects property.');\r\n                redirect.clientRequest.emit('error', err);\r\n                return redirect.clientRequest;\r\n            }\r\n\r\n            redirect.count++;\r\n\r\n            /**\r\n             * Parse URL from options\r\n             */\r\n            var reqUrl;\r\n            if (typeof options === 'string') {\r\n                reqUrl = options;\r\n            }\r\n            else {\r\n                reqUrl = url.format(_.extend({ protocol: protocol }, options));\r\n            }\r\n\r\n            /*\r\n             * Build client request\r\n             */\r\n            var clientRequest = h.__proto__.request(options, redirectCallback(reqUrl, redirect));\r\n\r\n            // Save user's clientRequest so we can emit errors later\r\n            if (!redirect.clientRequest) redirect.clientRequest = clientRequest;\r\n\r\n            /**\r\n             * ClientRequest callback for redirects\r\n             */\r\n            function redirectCallback (reqUrl, redirect) {\r\n                return function (res) {\r\n                    // status must be 300-399 for redirects\r\n                    if (res.statusCode < 300 || res.statusCode > 399) {\r\n                        return redirect.userCallback(res);\r\n                    }\r\n\r\n                    // no `Location:` header => nowhere to redirect\r\n                    if (!('location' in res.headers)) {\r\n                        return redirect.userCallback(res);\r\n                    }\r\n\r\n                    // we are going to follow the redirect, but in node 0.10 we must first attach a data listener\r\n                    // to consume the stream and send the 'end' event\r\n                    res.on('data', function() {});\r\n\r\n                    // save the original clientRequest to our redirectOptions so we can emit errors later\r\n\r\n                    // need to use url.resolve() in case location is a relative URL\r\n                    var redirectUrl = url.resolve(reqUrl, res.headers['location']);\r\n                    // we need to call the right api (http vs https) depending on protocol\r\n                    var proto = url.parse(redirectUrl).protocol;\r\n                    proto = proto.substr(0, proto.length - 1);\r\n\r\n                    // Make a new option object for next request from old options object\r\n                    // Break url in parts\r\n                    var searchname = url.parse(redirectUrl).search;\r\n                    var hostname = url.parse(redirectUrl).hostname;\r\n                    var pathname = url.parse(redirectUrl).pathname;\r\n\r\n                    var redirectOptions = options;\r\n                    redirectOptions.reqUrl = redirectUrl;\r\n                    redirectOptions.hostname = hostname;\r\n                    redirectOptions.path = pathname + searchname;\r\n\r\n                    var out = module.exports[proto].get(redirectOptions, redirectCallback(reqUrl, redirect), redirect);\r\n\r\n                    // bubble errors that occur on the redirect back up to the initiating client request\r\n                    // object, otherwise they wind up killing the process.\r\n                    out.on(\"error\", function(err) { clientRequest.emit(\"error\", err) });\r\n\r\n                    return out;\r\n                };\r\n            }\r\n\r\n            return clientRequest;\r\n        }\r\n    }(h);\r\n\r\n    // see https://github.com/joyent/node/blob/master/lib/http.js#L1623\r\n    h.get = function (h) {\r\n        return function (options, cb, redirectOptions) {\r\n            var req = h.request(options, cb, redirectOptions);\r\n            req.end();\r\n            return req;\r\n        };\r\n    }(h);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-closurecompiler/node_modules/closurecompiler/scripts/configure.js":"/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * ClosureCompiler.js: Configure Script (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/ClosureCompiler.js for details\r\n */\r\n\r\nvar ClosureCompiler = require(__dirname+\"/../ClosureCompiler.js\"),\r\n    fs = require(\"fs\"),\r\n    path = require(\"path\"),\r\n\tchild_process = require(\"child_process\"),\r\n    pkg = require(__dirname+\"/../package.json\"),\r\n    zlib = require(\"zlib\"),\r\n    tar = require(\"tar\");\r\n\r\nconsole.log(\"Configuring ClosureCompiler.js \"+pkg.version+\" ...\\n\");\r\n\r\n// Closure Compiler download url\r\nvar ccUrl = \"https://dl.google.com/closure-compiler/compiler-latest.tar.gz\";\r\n\r\n// Temporary file for the download\r\nvar ccTempFile = path.normalize(path.join(__dirname, \"..\", \"compiler\", \"compiler.tar.gz\"));\r\n\r\n// Gets the platform postfix for downloads\r\nfunction platformPostfix() {\r\n    if (/^win/.test(process.platform)) {\r\n        return process.arch == 'x64' ? 'win64' : 'win32';\r\n    } else if (/^darwin/.test(process.platform)) {\r\n        return 'osx64';\r\n    }\r\n    // This might not be ideal, but we don't have anything else and there is always a chance that it will work\r\n    return process.arch == 'x64' ? 'linux64' : 'linux32';\r\n}\r\n\r\n// Bundled JRE download url\r\nvar jrePrefix = \"https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/bundled-openjdk-jre/OpenJDK-JRE-7u6_24-\";\r\nvar jrePostfix = \".tar.gz\";\r\nvar jreUrl = jrePrefix+platformPostfix()+jrePostfix;\r\n\r\n// Temporary file for the download\r\nvar jreTempFile = path.normalize(path.join(__dirname, \"..\", \"jre\", \"jre.tar.gz\"));\r\n\r\nif (!fs.existsSync) fs.existsSync = path.existsSync; // node < 0.8\r\n\r\nconsole.log(\"  Downloading \"+ccUrl+\" ...\");\r\nvar lastBytes = 0, currentBytes = 0, mb = 1024*1024;\r\ndownload(ccUrl, ccTempFile, function(error, bytes) {\r\n    if (error) {\r\n        console.log(\"  ✖ Download failed: \"+error+\"\\n\");\r\n        fail();\r\n    }\r\n    console.log(\"  ✔ Download complete: \"+ccTempFile+\" (\"+parseInt(bytes/mb, 10)+\" mb)\\n\");\r\n    setTimeout(function() {\r\n        console.log(\"  Unpacking \"+ccTempFile+\" ...\");\r\n        unpack(ccTempFile, function(error) {\r\n            if (error) {\r\n                console.log(\"  ✖ Unpack failed: \"+error+\"\\n\");\r\n                fail();\r\n            }\r\n            setTimeout(function() { // Let the entry callbacks finish\r\n                console.log(\"  ✔ Unpack complete.\\n\");\r\n                configure_jre();\r\n            }, 1000);\r\n        }, function(entry) {\r\n            console.log(\"  | \"+entry[\"path\"]);\r\n        });\r\n    }, 1000);\r\n}, function(bytes, total) {\r\n    currentBytes += bytes;\r\n    if (currentBytes == bytes || currentBytes - lastBytes >= mb) {\r\n        console.log(\"  | \"+parseInt(currentBytes/mb, 10)+\" / \"+(total > 0 ? parseInt(total/mb, 10) : \"???\")+\" mb\");\r\n        lastBytes = currentBytes;\r\n    }\r\n});\r\n\r\n/**\r\n * Configures the JRE.\r\n */\r\nfunction configure_jre() {\r\n    console.log(\"  Configuring JRE ...\");\r\n\r\n    var mb = 1024*1024;\r\n\r\n    // Test if there is already a global Java so we don't need to download anything\r\n    ClosureCompiler.testJava(ClosureCompiler.getGlobalJava(), function(ok) {\r\n        if (ok) {\r\n            console.log(\"  ✔ Global Java is available, perfect!\\n\");\r\n            // Travis CI for example has one, so we save their bandwidth. And Google's. And yours. And...\r\n            finish();\r\n        } else {\r\n            if (fs.existsSync(path.join(__dirname, \"..\", \"jre\", \"bin\"))) {\r\n                console.log(\"  ✖ Global Java not found or outdated, testing bundled JRE ...\\n\");\r\n                runTest(true);\r\n            } else {\r\n                console.log(\"  ✖ Global Java not found or outdated, downloading bundled JRE ...\");\r\n                console.log(\"    Downloading \"+jreUrl+\" ...\");\r\n                lastBytes = 0; currentBytes = 0;\r\n                download(jreUrl, jreTempFile, function(error, bytes) {\r\n                    if (error) {\r\n                        console.log(\"    ✖ Download failed: \"+error+\"\\n\");\r\n                        fail();\r\n                    }\r\n                    console.log(\"    ✔ Download complete: \"+jreTempFile+\" (\"+parseInt(bytes/mb, 10)+\" mb)\\n\");\r\n                    setTimeout(function() {\r\n                        console.log(\"      Unpacking \"+jreTempFile+\" ...\");\r\n                        unpack(jreTempFile, function(error) {\r\n                            if (error) {\r\n                                console.log(\"      ✖ Unpack failed: \"+error+\"\\n\");\r\n                                fail();\r\n                            }\r\n                            setTimeout(function() { // Let the entry callbacks finish\r\n                                console.log(\"      ✔ Unpack complete.\\n\");\r\n                                configure();\r\n                                runTest(true);\r\n                            }, 1000);\r\n                        }, function(entry) {\r\n                            console.log(\"      | \"+entry[\"path\"]);\r\n                        });\r\n                    }, 1000);\r\n                }, function(bytes, total) {\r\n                    currentBytes += bytes;\r\n                    if (currentBytes == bytes || currentBytes - lastBytes >= mb) {\r\n                        console.log(\"    | \"+parseInt(currentBytes/mb, 10)+\" / \"+(total > 0 ? parseInt(total/mb, 10) : \"???\")+\" mb\");\r\n                        lastBytes = currentBytes;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Downloads a file.\r\n * @param {string} downloadUrl\r\n * @param {string} filename\r\n * @param {function(?Error,number)} callback\r\n * @param {function(number)=} ondata\r\n */\r\nfunction download(downloadUrl, filename, callback, ondata) {\r\n    var url = require(\"url\").parse(downloadUrl);\r\n    var out = require(\"fs\").createWriteStream(filename, { flags: 'w', encoding: null, mode: 0666 });\r\n    var bytes = 0, total = -1;\r\n    var options = {\r\n        \"hostname\" : url[\"host\"],\r\n        \"method\" : \"GET\",\r\n        \"path\" : url[\"path\"],\r\n        \"agent\" : false\r\n    }\r\n\r\n    // Reconfigure request options if an HTTP proxy setting exists\r\n    if (process.env.http_proxy) {\r\n        var http_proxy = require(\"url\").parse(process.env.http_proxy);\r\n        options[\"hostname\"] = http_proxy[\"hostname\"];\r\n        options[\"port\"] = http_proxy[\"port\"];\r\n        options[\"path\"] = url[\"href\"];\r\n        options[\"headers\"] = {\r\n            \"Host\" : url[\"host\"]\r\n        };\r\n    }\r\n\r\n    var req = require(path.join(__dirname, \"..\", \"lib\", \"follow-redirects.js\")).http.request(options,\r\n                                                                                             function(res) {\r\n        if (res.headers[\"content-length\"]) {\r\n            total = parseInt(res.headers[\"content-length\"], 10);\r\n        }\r\n        if (res.statusCode != 200) {\r\n            res.setEncoding(null);\r\n            callback(new Error(\"Download failed: HTTP status code \"+res.statusCode), -1);\r\n            return;\r\n        }\r\n        res.on(\"data\", function(chunk) {\r\n            bytes += chunk.length;\r\n            if (ondata) ondata(chunk.length, total);\r\n            out.write(chunk);\r\n        });\r\n\r\n        res.on(\"end\", function() {\r\n            callback(null, bytes);\r\n        });\r\n    });\r\n    req.on(\"error\", function(e) {\r\n        callback(e, -1);\r\n    });\r\n    req.end();\r\n}\r\n\r\n/**\r\n * Unpacks a file in place.\r\n * @param {string} filename File name\r\n * @param {function(?Error)} callback\r\n * @param {function(Object)=} entryCallback\r\n */\r\nfunction unpack(filename, callback, entryCallback) {\r\n    var input = fs.createReadStream(filename, { flags: 'r', encoding: null }),\r\n        files = {},\r\n        dir = path.dirname(filename),\r\n        returned = false,\r\n        to = null;\r\n\r\n    // Finishs the unpack if all files are done\r\n    function maybeFinish() {\r\n        if (to !== null) clearTimeout(to);\r\n        to = setTimeout(function() {\r\n            var alldone = true;\r\n            var names = Object.keys(files);\r\n            for (var i=0; i<names.length; i++) {\r\n                if (!files[names[i]][\"done\"]) {\r\n                    alldone = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (alldone && !returned) {\r\n                returned = true;\r\n                callback(null);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    input.pipe(zlib.createGunzip()).pipe(tar.Parse()).on(\"entry\", function(entry) {\r\n        if (entryCallback) entryCallback(entry);\r\n        if (entry[\"type\"] == 'File') {\r\n            files[entry[\"path\"]] = fs.createWriteStream(path.join(dir, entry[\"path\"]), { flags: 'w', encoding: null });\r\n            entry.pipe(files[entry[\"path\"]]);\r\n            entry.on(\"end\", function() {\r\n                files[entry[\"path\"]].end();\r\n                files[entry[\"path\"]][\"done\"] = true;\r\n                maybeFinish();\r\n            });\r\n        } else if (entry[\"type\"] == \"Directory\") {\r\n            try {\r\n                fs.mkdirSync(path.join(dir, entry[\"path\"]));\r\n            } catch (e) {\r\n                if (!fs.existsSync(path.join(dir, entry[\"path\"]))) {\r\n                    if (!returned) {\r\n                        returned = true;\r\n                        callback(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }).on(\"error\", function(e) {\r\n        if (!returned) {\r\n            returned = true;\r\n            callback(e);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Configures our bundled Java.\r\n */\r\nfunction configure() {\r\n    var java = path.normalize(path.join(__dirname, \"..\", \"jre\", \"bin\", \"java\"+ClosureCompiler.JAVA_EXT));\r\n    console.log(\"  Configuring bundled JRE for platform '\"+platformPostfix()+\"' ...\");\r\n    if (!/^win/.test(process.platform)) {\r\n        var jre = path.normalize(path.join(__dirname, \"..\", \"jre\"));\r\n        console.log(\"  | 0755 \"+jre);\r\n        fs.chmodSync(jre, 0755);\r\n        console.log(\"  | 0755 \"+path.join(jre, \"bin\"));\r\n        fs.chmodSync(path.join(jre, \"bin\"), 0755);\r\n        console.log(\"  | 0755 \"+java);\r\n        fs.chmodSync(java, 0755);\r\n        console.log(\"  Complete.\\n\");\r\n    } else {\r\n        console.log(\"  Complete (not necessary).\\n\");\r\n    }\r\n}\r\n\r\n/**\r\n * Runs the final test.\r\n * @param {boolean=} ensureBundled\r\n */\r\nfunction runTest(ensureBundled) {\r\n    console.log(\"  Testing bundled Java ...\");\r\n    console.log(\"  | exec \"+ClosureCompiler.getBundledJava());\r\n    ClosureCompiler.testJava(ClosureCompiler.getBundledJava(), function(ok, err) {\r\n        if (ok) {\r\n            console.log(\"  ✔ Successfully called bundled Java!\\n\");\r\n            finish();\r\n        } else {\r\n            if (ensureBundled) {\r\n                console.log(\"  ✖ Failed to call bundled java:\");\r\n                console.log(\"-----\\n\"+err+\"\\n-----\");\r\n                console.log(\"  ✖ Trying global java instead ...\");\r\n            } else {\r\n                console.log(\"  ✖ Failed to call bundled java, trying global java instead ...\");\r\n            }\r\n            console.log(\"    | exec \"+ClosureCompiler.getGlobalJava()+\"\\n\");\r\n            ClosureCompiler.testJava(ClosureCompiler.getGlobalJava(), function(ok, err) {\r\n                if (ok) {\r\n                    console.log(\"    ✔ Successfully called global Java!\\n\");\r\n                    finish();\r\n                } else {\r\n                    console.log(\"    ✖ Failed to call global Java.\\n\");\r\n                    fail();\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Cleans up.\r\n */\r\nfunction cleanUp() {\r\n    try { fs.unlinkSync(ccTempFile); } catch (e) {}\r\n    try { fs.unlinkSync(jreTempFile); } catch (e) {}\r\n    // ...your harddrive's space.\r\n}\r\n\r\n/**\r\n * Fails.\r\n */\r\nfunction fail() {\r\n    cleanUp();\r\n    console.log(\"  ✖ Unfortunately, ClosureCompiler.js could not be configured.\");\r\n    console.log(\"    See: https://github.com/dcodeIO/ClosureCompiler.js (create an issue maybe)\\n\");\r\n    process.exit(1);\r\n}\r\n\r\n/**\r\n * Finishes.\r\n */\r\nfunction finish() {\r\n    cleanUp();\r\n    console.log(\"  ✔ ClosureCompiler.js has successfully been configured!\\n\");\r\n}\r\n"}